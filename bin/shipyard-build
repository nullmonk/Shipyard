#!/usr/bin/env python3

"""
Use Shipyard to build a package on a host.

Expects to be in a build directory with all the dependancies already installed
"""

import sys
import os
import re
import subprocess
import glob

try:
    import fire
except ImportError:
    fire = None

try:
    from shutil import copytree
except ImportError:
    from distutils.dir_util import copy_tree as copytree

BUILD_MODES = {
    "ubuntu": "deb",
    "debian": "deb",
    "centos": "rpm",
    "fedora": "rpm",
    "redhat": "rpm",

    # TODO
    "arch": "", 
    "alpine": "",
}

class Pkg:
    def __init__(self, OriginalName, Name, Version="", AdditionalVersion="", Folder=""):
        self.OriginalName = OriginalName
        self.Name = Name
        self.Version = Version
        self.AdditionalVersion = AdditionalVersion
        self.Folder = Folder

def run(folder, args, err="", **kwargs):
    res = subprocess.run(
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        cwd=folder,
        encoding="utf-8",
        **kwargs
    )
    if res.returncode != 0 and err:
        raise ValueError(f"{err}: {res.stdout}\n{res.stderr}")
    return res

def GeneratePatch(shipcontext, pkg: Pkg, mode="") -> str:
    """Generate a patch using shipyard
    shipcontext can either be file, dir, or zipfile

    if its a dir, check for a shipfile in it
    if its a zip, unzip it and use that dir as the new shipcontext
    if its a file, thats the shipfile
    """
    from shipyard.patches import Patches
    p = Patches(shipcontext, pull=False)
    # Only code patches are here, this makes patching very nice for us
    if not p.versions:
        p._ver = pkg.Version
        print("[*] This shipfile contains only codepatches. Running against prepared source (This is a good thing)")
        if mode == "deb":
            with open(os.path.join(pkg.Folder, ".gitignore"), 'a') as f:
                f.write(".pc/\n.pc/*\n") # add the .pc directory to the gitignore bc it contains a copy of all the source
        return p.export_from(pkg.Folder)
    
    p.source.prepare()

    # If the version isnt an exact match, try to find the closest
    if pkg.Version not in p.source.versions():
        for v in p.source.versions():
            if pkg.Version in v or v in pkg.Version:
                pkg.Version = v
                break
    p.patch_version(pkg.Version)
    p.load() # refresh the patches that we know about
    patch, _ = p.export(pkg.Version)
    return patch

# TODO: SUPPORTED_MODES = ["arch", "deb", "rpm"]
SUPPORTED_MODES = ["deb", "rpm"]

class cli:
    def __init__(self, mode=""):
        """Get system information"""
        try:    
            with open("/etc/os-release") as f:
                lines = f.readlines()
            os_info = dict(line.strip().split("=", 1) for line in lines if "=" in line)
            self.os = os_info.get("ID", "unknown").strip('"')
            self.os_version = os_info.get("VERSION_ID", "0").strip('"')
        except:
            raise ValueError(f"Build mode is not specified. Set BUILD_MODE or pass --mode. Supported modes: {list(set(SUPPORTED_MODES.values()))}")
        
        self.mode = BUILD_MODES.get(self.os, "")
        if not self.mode:
            self.mode = os.environ.get("BUILD_MODE", mode)
            if not self.mode:
                raise ValueError(f"Build mode is not specified. Set BUILD_MODE or pass --mode. Supported modes: {list(set(SUPPORTED_MODES.values()))}")


    def _get_pkg(self, package) -> Pkg:
        """Return a Pkg object with version information. System dependant"""
        pkg = Pkg(package, package)
        # Get the current version
        if self.mode == "deb":
            # There should be a dsc file laying around here that we can parse the package version from
            f = glob.glob("*.dsc")
            if not f:
                print("[!] No APT source DSC file laying around!. Exiting")
                exit(127)
            reg = r"(.+)_([\d\w\+\.]+)(-(.+))?\.dsc"
            groups = re.compile(reg).match(f[0])
            if not groups:
                print(f"[!] Filename '{f[0]}' was not valid. Needs to match regex r'{reg}'")
                exit(1)
            if not package:
                package = groups.group(1)
            pkg = Pkg(package, groups.group(1), groups.group(2), groups.group(4))
            pkg.Folder = f"{pkg.Name}-{pkg.Version}"
            pkg.Version = pkg.Version.split("+")[0] # Hack for proftpd
            print(f"[*] found '{pkg.Name}-{pkg.Version}' from file '{f[0]}'")
        elif self.mode == "rpm":
            f = glob.glob("*.src.rpm")
            if not f:
                print("[!] No source RPM file laying around!. Exiting")
                exit(127)
            reg = r"([^-]+)-([\d\w\.]+)(-(.+))?\.src.rpm"
            groups = re.compile(reg).match(f[0])
            if not groups:
                print(f"[!] Filename passed was not valid. Needs to match regex r'{reg}'. {f}")
                exit(1)
            if not package:
                package = groups.group(1)
            pkg = Pkg(package, groups.group(1), groups.group(2), groups.group(4))

            # Find the build folders installed
            bdir = "BUILD"
            for i in os.listdir(bdir):
                full_path = os.path.join(bdir, i)
                i = i.lower()
                if os.path.isdir(full_path):
                    if pkg.Name.lower() in i and pkg.Version.lower() in i:
                        pkg.Folder = full_path

            print(f"[*] found '{pkg.Folder}' from file '{f[0]}'")
        else:
            print("[!] mode not supported for gen", self.mode)
            exit(127)
        
        if not pkg.Folder or not os.path.isdir(pkg.Folder):
            print(f"[!] Source folder '{pkg.Folder}' not found. Was the source package installed properly?")
            exit(1)
        return pkg

    def gen(self, shipcontext, patchfile, package=""):
        """Generate a patch for the current app version using the given shipfile"""
        patches = []
        ctx = ""
        # Make sure we have either patches, or a shipfile. They can all be in one directory
        if os.path.isdir(shipcontext):
            files = os.listdir(shipcontext)
            if "shipfile.py" in files:
                ctx = shipcontext
            else:
                patches = [i for i in files if i.endswith(".patch") or i.endswith(".diff")]
        elif os.path.isfile(shipcontext):
            if shipcontext.endswith(".patch") or shipcontext.endswith(".diff"):
                patches.append(shipcontext)
            elif shipcontext == "shipfile.py":
                ctx, _ = os.path.split(shipcontext)
        else:
            print("[!] Error: No shipfile or patchfiles given. Refusing to build")
            quit(1)

        if not ctx:
            if not patches:
                print("[!] Error: No shipfile or patchfiles given. Refusing to build")
                quit(1)
            # Concat all the patchfiles we are given into a big patchfile
            print(f"[*] Saving patchfiles to {patchfile}: {patches}")
            with open(patchfile, "w") as f:
                for f in patches:
                    with open(f) as p:
                        f.write(p.read())
                        f.write("\n")
            quit()

        # Use shipyard to generate a patch
        pkg = self._get_pkg(package)
        # Use shipyard to generate a patchfile now for this version
        patch = GeneratePatch(shipcontext, pkg, mode=self.mode)
        if not patch:
            raise ValueError("Could not export patch!")
        with open(patchfile, "w") as f:
            f.write(patch)
        print(f"[+] Patch for version {pkg.Version} saved to {patchfile} ({len(patch.splitlines())}  lines)")

    def apply(self, patchfile, package=""):
        """Apply a patchfile to the package"""
        pkg = self._get_pkg(package)
        print(f"[*] applying patchfile {patchfile} to {pkg.Name}-{pkg.Version}")
        
        if self.mode == "deb":
            res = run(pkg.Folder, ["quilt", "import", patchfile], "Error importing quilt patch")
            print(res.stdout)
            res = run(pkg.Folder, ["quilt", "push"], "Error pushing quilt patch")
            print(res.stdout)
            res = run(pkg.Folder, ["quilt", "refresh"], "Error refreshing quilt patch")
            print(res.stdout)
            return
        if self.mode == "rpm":
            # A tad more complicated than just a quilt import. Read the SPEC file and add a patch
            # Find the spec file
            f = glob.glob("SPECS/*.spec")
            if not f:
                print("[!] No SPEC file laying around!. Exiting")
                exit(127)
            
            print(f"[*] copying {pkg.Folder} to {pkg.Folder}-new")
            copytree(pkg.Folder, pkg.Folder + "-new")
            print(f"[*] Applying patch file to {pkg.Folder}-new")
            res = run(pkg.Folder + "-new", ["patch", "-p1", "-f", "-i", patchfile], "Error importing patch")
            with open(patchfile) as p:
                with open(f"SOURCES/{pkg.OriginalName}.patch", "w") as newpatch:
                    newpatch.write(p.read())
            print(f"[*] Copied {patchfile} -> SOURCES/{pkg.OriginalName}.patch")
            from shipyard.ez import EZ
            with EZ(f[0]) as z:
                # Find the highest numbered patch file
                last = -1
                spec_format = ""
                for i in z.contents.splitlines():
                    if i.startswith("Patch"):
                        i = i.split(":")[0]
                        i = i[len("Patch"):]
                        if i.isnumeric():
                            last = max(int(i), last)
                    if i.startswith("%patch"):
                        spec_format = i
                # Register the patch file
                if last > 0:
                    new = f"Patch{last+1}: {pkg.OriginalName}.patch"
                    z.reinsert(re.compile(f"Patch{last}:.+\\n"), new)
                    # Tell prep to apply the patch
                    if '-P ' in spec_format:
                        # New spec format '%patch -P 111 -p1'
                        z.reinsert(re.compile(f"%patch.*{last}.*\\n"), f"%patch -P {last+1} -p1")
                    else:
                        # Legacy spec format '%patch111 -p1'
                        z.reinsert(re.compile(f"%patch.*{last}.*\\n"), f"%patch{last+1} -p1")
                    print(f"[*] Added {new} to {f[0]}")
                else:
                    raise ValueError("Could not find any Patches in the spec file")
            return
        raise NotImplementedError(f"Cannot apply on '{self.mode}' systems")
    
    def build(self, package=""):
        """Build the source after applying patches"""
        pkg = self._get_pkg(package)
        if self.mode == "deb":
            env = os.environ.copy()
            env["DEB_BUILD_OPTIONS"] = "notest nocheck"
            env["DEBUILD_DPKG_BUILDPACKAGE_OPTS"] = "-d"
            res = subprocess.run(
                ["debuild", "--no-lintian", "-d", "-uc", "-us", "-b"],
                stdout=sys.stdout,
                stderr=sys.stderr,
                cwd=pkg.Folder,
                env=env
            )
            exit(res.returncode)
        elif self.mode == "rpm":
            # Find the spec file
            f = glob.glob("SPECS/*.spec")
            if not f:
                print("[!] No SPEC file laying around!. Exiting")
                exit(127)
            res = subprocess.run(
                ["rpmbuild", "--define", "debug_package %{nil}", "--nocheck", "-bb", f[0]],
                stdout=sys.stdout,
                stderr=sys.stderr,
            )
            exit(res.returncode)
        raise NotImplementedError(f"Cannot apply on '{self.mode}' systems")
    
    def setup(self):
        """Setup the system for building, install dependancies, and enable source repos"""
        if self.os in ["ubuntu", "debian"]:
            print("[*] Enabling source mirrors")
            with open("/etc/apt/sources.list", "r+") as f:
                new_lines = []
                srcs = False
                first_deb = ""
                for line in f.readlines():
                    line = line.strip()
                    # Save the first valid line we come across
                    if line and not line.startswith("#") and "deb " in line and not first_deb:
                        first_deb = line
                    # Uncomment any source mirrors
                    if "deb-src" in line:
                        line = line.strip("# ")
                        srcs = True
                    new_lines.append(line)
                if not srcs:
                    new_lines.append(first_deb.replace("deb ", "deb-src "))
                new_lines.append("")
                f.truncate(0)
                f.write("\n".join(new_lines))
            
            # Ubuntu uses a new format for apt sources
            for root, _, files in os.walk("/etc/apt/sources.list.d"):
                for filename in files:
                    filepath = os.path.join(root, filename)
                    # Read the entire file content
                    with open(filepath, 'r') as f:
                        content = f.read().replace("Types:", "Types: deb-src")
                    # Write the modified content back to the file
                    with open(filepath, 'w') as f:
                        f.write(content)

            print("[*] Updating apt-cache")
            subprocess.run("apt-get update -qq", shell=True, stdout=sys.stdout, stderr=sys.stderr)

        elif self.os == "fedora":
            subprocess.run("dnf install -y -q dnf-plugins-core", shell=True)
            subprocess.run("dnf config-manager --set-enabled fedora-source updates-source", shell=True, check=False)
            subprocess.run("dnf makecache -q", shell=True)

        elif self.os in ["centos", "rhel", "rocky", "almalinux"]:
            subprocess.run("yum install -y -q yum-utils", shell=True)
            subprocess.run("dnf config-manager --set-enabled crb powertools", shell=True, check=False)
            result = subprocess.run("yum repolist all", shell=True, stdout=subprocess.PIPE)
            if any(x in result.stdout.decode() for x in ["PowerTools", "powertools", "crb"]):
                subprocess.run("yum-config-manager --enable PowerTools powertools crb", shell=True, check=False)
            subprocess.run("yum-config-manager --enable base-source updates-source", shell=True, check=False)
            subprocess.run("yum makecache -q", shell=True)

        elif self.os == "arch":
            # TODO Convert this to python
            subprocess.run("sed -i 's/^#\\[.*\\]/[core]/' /etc/pacman.conf", shell=True)
            subprocess.run("sed -i 's/^#Include/Include/' /etc/pacman.conf", shell=True)
            subprocess.run("pacman -Sy --noconfirm", shell=True)
        
        else:
            print(f"Unsupported distro for source repo enabling: {self.os}")

        self.pip_install("--upgrade", "pip", "setuptools", "wheel")

    def install_package(self, *packages):
        pkg_str = " ".join(packages)
        if self.os in ["ubuntu", "debian"]:
            subprocess.run(f"apt-get install -y -qq {pkg_str}", shell=True)
        elif self.os == "fedora":
            subprocess.run(f"dnf install -y -q {pkg_str}", shell=True)
        elif self.os in ["centos", "rhel", "rocky", "almalinux"]:
            subprocess.run(f"yum install -y -q {pkg_str}")
        elif self.os == "arch":
            subprocess.run(f"pacman -S --noconfirm {pkg_str}", shell=True)
        elif self.os == "alpine":
            subprocess.run(f"apk add --no-cache -q {pkg_str}", shell=True)
        else:
            print(f"Unsupported distro: {self.os}")
            sys.exit(1)

    def pip_install(self, *args):
        subprocess.run(f"python3 -m pip install --quiet {' '.join(args)}", shell=True)

if __name__ == '__main__':
    if fire:
        fire.Fire(cli)
    else:
        c = cli()
        c.setup()